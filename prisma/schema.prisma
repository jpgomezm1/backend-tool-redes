generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TikTokPublication {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String
  duration    Int?
  hashtags    String[]
  soundName   String?
  soundTrending Boolean @default(false)
  publishedAt DateTime
  videoUrl    String?
  videoFile   String?  // Nueva campo para el archivo de video
  thumbnailUrl String?
  scriptUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  metrics     TikTokMetrics[]
  
  @@map("tiktok_publications")
}

model TikTokMetrics {
  id                String   @id @default(cuid())
  publicationId     String
  views             Int      @default(0)
  likes             Int      @default(0)
  comments          Int      @default(0)
  shares            Int      @default(0)
  saves             Int      @default(0)
  engagementRate    Float    @default(0)
  averageWatchTime  Float    @default(0)
  viralScore        Int      @default(0)
  soundInteractions Int      @default(0)
  recordedAt        DateTime @default(now())
  
  publication TikTokPublication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  
  @@map("tiktok_metrics")
}

model PlannedContent {
  id            String   @id @default(cuid())
  title         String
  description   String?
  contentType   String
  hashtags      String[]
  soundIdea     String?
  scheduledDate DateTime
  status        String
  estimatedViews Int?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("planned_content")
}

model TikTokReferent {
  id             String   @id @default(cuid())
  url            String
  username       String
  followers      Int
  avgViews       Int
  engagementRate Float
  niche          String
  notes          String?
  addedAt        DateTime @default(now())
  
  @@map("tiktok_referents")
}

model TikTokAccountMetrics {
  id                        String   @id @default(cuid())
  
  // Métricas básicas
  videoViews                BigInt?
  profileViews              BigInt?
  
  // Audiencia
  totalViewers              BigInt?
  newViewers                BigInt?
  totalFollowers            BigInt?
  netFollowers              BigInt?
  
  // Fuentes de tráfico (%)
  forYouTrafficPercent      Float?
  personalProfilePercent    Float?
  searchTrafficPercent      Float?
  followingTrafficPercent   Float?
  soundTrafficPercent       Float?
  
  // Demografía de género (%)
  maleGenderPercent         Float?
  femaleGenderPercent       Float?
  otherGenderPercent        Float?
  
  // Datos complejos extraídos por Gemini (JSON)
  searchQueries             Json?     // [{"term": "dance", "percentage": 25.5}]
  ageRanges                 Json?     // [{"range": "18-24", "percentage": 45.2}]
  topLocations              Json?     // [{"location": "México", "type": "country", "percentage": 30.5}]
  mostActiveTimesViewers    Json?     // [{"hour": 20, "percentage": 15.5}]
  mostActiveTimesFollowers  Json?     // [{"hour": 21, "percentage": 18.2}]
  creatorsAlsoWatched       Json?     // [{"username": "@creator1", "followers": 1000000}]
  
  // Metadatos
  recordedAt                DateTime @default(now())
  periodStart               DateTime
  periodEnd                 DateTime
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  @@map("tiktok_account_metrics")
}