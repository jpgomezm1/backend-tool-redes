import readline from 'readline';
import prisma from '../services/database';
import { analyzeGCSImage } from '../services/gcsImageAnalysis';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

function parseNumber(input: string): number | undefined {
  if (!input || input === '') return undefined;
  const num = parseFloat(input);
  return isNaN(num) ? undefined : num;
}

function parseBigInt(input: string): bigint | undefined {
  if (!input || input === '') return undefined;
  const num = parseInt(input);
  return isNaN(num) ? undefined : BigInt(num);
}

async function loadAccountMetrics() {
  try {
    console.log('üìä CARGA DE M√âTRICAS DE CUENTA TIKTOK');
    console.log('=====================================');
    console.log('Presiona Enter para saltar campos opcionales\n');

    // Verificar API Key de Gemini
    const geminiApiKey = process.env.GEMINI_API_KEY;
    if (!geminiApiKey) {
      console.log('‚ùå API Key de Gemini no configurada');
      rl.close();
      return;
    }

    // Per√≠odo
    const periodStart = await askQuestion('üìÖ Fecha inicio del per√≠odo (YYYY-MM-DD): ');
    const periodEnd = await askQuestion('üìÖ Fecha fin del per√≠odo (YYYY-MM-DD): ');

    if (!periodStart || !periodEnd) {
      console.log('‚ùå Las fechas de per√≠odo son obligatorias');
      rl.close();
      return;
    }

    // M√âTRICAS POR CONSOLA
    console.log('\nüìπ M√âTRICAS B√ÅSICAS');
    const videoViews = await askQuestion('Vistas de videos: ');
    const profileViews = await askQuestion('Vistas de perfil: ');

    console.log('\nüë• M√âTRICAS DE AUDIENCIA');
    const totalViewers = await askQuestion('Total de viewers: ');
    const newViewers = await askQuestion('Nuevos viewers: ');
    const totalFollowers = await askQuestion('Total de seguidores: ');
    const netFollowers = await askQuestion('Seguidores netos: ');

    console.log('\nüö¶ FUENTES DE TR√ÅFICO (%)');
    const forYouTrafficPercent = await askQuestion('Tr√°fico de For You (%): ');
    const personalProfilePercent = await askQuestion('Tr√°fico de perfil personal (%): ');
    const searchTrafficPercent = await askQuestion('Tr√°fico de b√∫squeda (%): ');
    const followingTrafficPercent = await askQuestion('Tr√°fico de siguiendo (%): ');
    const soundTrafficPercent = await askQuestion('Tr√°fico de sonido (%): ');

    console.log('\nüöª DEMOGRAF√çA DE G√âNERO (%)');
    const maleGenderPercent = await askQuestion('G√©nero masculino (%): ');
    const femaleGenderPercent = await askQuestion('G√©nero femenino (%): ');
    const otherGenderPercent = await askQuestion('Otro g√©nero (%): ');

    // IM√ÅGENES PARA AN√ÅLISIS CON GEMINI
    console.log('\nüñºÔ∏è AN√ÅLISIS DE IM√ÅGENES CON GEMINI');
    console.log('Proporciona las URLs de las im√°genes en Google Cloud Storage:');
    
    const searchImageUrl = await askQuestion('üì± URL imagen de b√∫squedas (Enter para saltar): ');
    const demographicsImageUrl = await askQuestion('üë• URL imagen de demograf√≠a/edad (Enter para saltar): ');
    const locationsImageUrl = await askQuestion('üåç URL imagen de ubicaciones (Enter para saltar): ');
    const viewersTimesImageUrl = await askQuestion('‚è∞ URL imagen horarios viewers (Enter para saltar): ');
    const followersTimesImageUrl = await askQuestion('‚è∞ URL imagen horarios followers (Enter para saltar): ');
    const creatorsImageUrl = await askQuestion('üë§ URL imagen creadores relacionados (Enter para saltar): ');

    // Inicializar variables
    let searchQueries: any = undefined;
    let ageRanges: any = undefined;
    let topLocations: any = undefined;
    let mostActiveTimesViewers: any = undefined;
    let mostActiveTimesFollowers: any = undefined;
    let creatorsAlsoWatched: any = undefined;

    // Analizar im√°genes con Gemini
    console.log('\nü§ñ Analizando im√°genes con Gemini...');

    if (searchImageUrl) {
      console.log('üîç Analizando b√∫squedas...');
      const result = await analyzeGCSImage(searchImageUrl, 'search', geminiApiKey);
      if (result.success) {
        searchQueries = result.searchQueries;
        console.log('‚úÖ B√∫squedas extra√≠das:', searchQueries?.length || 0, 'elementos');
      } else {
        console.log('‚ùå Error analizando b√∫squedas:', result.error);
      }
    }

    if (demographicsImageUrl) {
      console.log('üë• Analizando demograf√≠a...');
      const result = await analyzeGCSImage(demographicsImageUrl, 'demographics', geminiApiKey);
      if (result.success) {
        ageRanges = result.ageRanges;
        console.log('‚úÖ Rangos de edad extra√≠dos:', ageRanges?.length || 0, 'elementos');
      } else {
        console.log('‚ùå Error analizando demograf√≠a:', result.error);
      }
    }

    if (locationsImageUrl) {
      console.log('üåç Analizando ubicaciones...');
      const result = await analyzeGCSImage(locationsImageUrl, 'locations', geminiApiKey);
      if (result.success) {
        topLocations = result.topLocations;
        console.log('‚úÖ Ubicaciones extra√≠das:', topLocations?.length || 0, 'elementos');
      } else {
        console.log('‚ùå Error analizando ubicaciones:', result.error);
      }
    }

    if (viewersTimesImageUrl) {
      console.log('‚è∞ Analizando horarios de viewers...');
      const result = await analyzeGCSImage(viewersTimesImageUrl, 'viewers_times', geminiApiKey);
      if (result.success) {
        mostActiveTimesViewers = result.mostActiveTimesViewers;
        console.log('‚úÖ Horarios viewers extra√≠dos:', mostActiveTimesViewers?.length || 0, 'elementos');
      } else {
        console.log('‚ùå Error analizando horarios viewers:', result.error);
      }
    }

    if (followersTimesImageUrl) {
      console.log('‚è∞ Analizando horarios de followers...');
      const result = await analyzeGCSImage(followersTimesImageUrl, 'followers_times', geminiApiKey);
      if (result.success) {
        mostActiveTimesFollowers = result.mostActiveTimesFollowers;
        console.log('‚úÖ Horarios followers extra√≠dos:', mostActiveTimesFollowers?.length || 0, 'elementos');
      } else {
        console.log('‚ùå Error analizando horarios followers:', result.error);
      }
    }

    if (creatorsImageUrl) {
      console.log('üë§ Analizando creadores relacionados...');
      const result = await analyzeGCSImage(creatorsImageUrl, 'creators', geminiApiKey);
      if (result.success) {
        creatorsAlsoWatched = result.creatorsAlsoWatched;
        console.log('‚úÖ Creadores extra√≠dos:', creatorsAlsoWatched?.length || 0, 'elementos');
      } else {
        console.log('‚ùå Error analizando creadores:', result.error);
      }
    }

    // Guardar en base de datos
    console.log('\nüíæ Guardando m√©tricas en base de datos...');

    const metrics = await prisma.tikTokAccountMetrics.create({
      data: {
        // M√©tricas b√°sicas
        videoViews: parseBigInt(videoViews),
        profileViews: parseBigInt(profileViews),
        
        // Audiencia
        totalViewers: parseBigInt(totalViewers),
        newViewers: parseBigInt(newViewers),
        totalFollowers: parseBigInt(totalFollowers),
        netFollowers: parseBigInt(netFollowers),
        
        // Tr√°fico
        forYouTrafficPercent: parseNumber(forYouTrafficPercent),
        personalProfilePercent: parseNumber(personalProfilePercent),
        searchTrafficPercent: parseNumber(searchTrafficPercent),
        followingTrafficPercent: parseNumber(followingTrafficPercent),
        soundTrafficPercent: parseNumber(soundTrafficPercent),
        
        // Demograf√≠a
        maleGenderPercent: parseNumber(maleGenderPercent),
        femaleGenderPercent: parseNumber(femaleGenderPercent),
        otherGenderPercent: parseNumber(otherGenderPercent),
        
        // Datos complejos extra√≠dos por Gemini
        searchQueries: searchQueries || undefined,
        ageRanges: ageRanges || undefined,
        topLocations: topLocations || undefined,
        mostActiveTimesViewers: mostActiveTimesViewers || undefined,
        mostActiveTimesFollowers: mostActiveTimesFollowers || undefined,
        creatorsAlsoWatched: creatorsAlsoWatched || undefined,
        
        // Per√≠odo
        periodStart: new Date(periodStart),
        periodEnd: new Date(periodEnd)
      }
    });

    console.log('\n‚úÖ M√©tricas guardadas exitosamente!');
    console.log(`üìä ID: ${metrics.id}`);
    console.log(`üìÖ Per√≠odo: ${periodStart} - ${periodEnd}`);
    console.log(`üñºÔ∏è Im√°genes analizadas: ${[searchImageUrl, demographicsImageUrl, locationsImageUrl, viewersTimesImageUrl, followersTimesImageUrl, creatorsImageUrl].filter(Boolean).length}/6`);

  } catch (error) {
    console.error('‚ùå Error guardando m√©tricas:', error);
  } finally {
    rl.close();
    await prisma.$disconnect();
  }
}

loadAccountMetrics();